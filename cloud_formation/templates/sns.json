{
  "Parameters": {
    "RDSDbName": {
      "Description": "Database name",
      "Default": "awstest",
      "Type": "String"
    },
    "RDSUsername": {
      "Description": "Database root username",
      "Default": "root",
      "Type": "String"
    },
    "RDSPassword": {
      "Description": "Database rot password",
      "Default": "DB_ADMIN_$",
      "Type": "String"
    },
    "PSubnetIds": {
      "Description": "Subnet IDs",
      "Default": "subnet-23e73349,subnet-568e8d2b,subnet-c8e7f185",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "SourceCodeS3Bucket": {
      "Type": "String",
      "Default": "aws.cloudformation.test",
      "Description": "S3 bucket id which contains source lambda code"
    },
    "SourceCodeS3BucketKey": {
      "Type": "String",
      "Default": "function.zip",
      "Description": "Path to code in S3 bucket"
    }
  },
  "Resources": {
    "IamRoleLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "CloudwatchLogs",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:GetLogEvents",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "SNSPublish",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    {
                      "Ref": "EmailsSNSTopic"
                    }
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ]
      }
    },
    "LambdaHandler": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda.handler",
        "Code": {
          "S3Bucket": {
            "Ref": "SourceCodeS3Bucket"
          },
          "S3Key": {
            "Ref": "SourceCodeS3BucketKey"
          }
        },
        "Description": "triggered by S3 update event",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambda",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": 3,
        "VpcConfig": {
          "SubnetIds": {
            "Ref": "PSubnetIds"
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": "LambdaHandlerSecurityGroup.GroupId"
            }
          ]
        },
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": {
              "Ref": "EmailsSNSTopic"
            },
            "DYNAMO_DB_TABLE_NAME": "test",
            "DB_HOST": "test",
            "DB_NAME": {
              "Ref": "RDSDbName"
            },
            "DB_USER": {
              "Ref": "RDSUsername"
            },
            "DB_PASSWORD": {
              "Ref": "RDSPassword"
            }
          }
        }
      }
    },
    "EmailsSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": "Serhii_Sych@epam.com",
            "Protocol": "email"
          }
        ]
      }
    },
    "LambdaHandlerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for Lambda"
      }
    },
    "SNSEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": "SNSEndpointSecurityGroup.GroupId"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".sns"
            ]
          ]
        },
        "SubnetIds": {
          "Ref": "PSubnetIds"
        },
        "VpcEndpointType": "Interface",
        "VpcId": "vpc-5cbd5136"
      }
    },
    "SNSEndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for SNS endpoint",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 0,
            "ToPort": 65535,
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "LambdaHandlerSecurityGroup",
                "GroupId"
              ]
            }
          }
        ]
      }
    }
  }
}